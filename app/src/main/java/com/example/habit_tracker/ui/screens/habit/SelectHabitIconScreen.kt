package com.example.habit_tracker.ui.screens.habit // Adjust package if needed

// *** Import the AppIcons object ***
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.Check
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.habit_tracker.data.db.HabitEntity
import com.example.habit_tracker.model.HabitType
import com.example.habit_tracker.ui.navigation.AppDestinations
import com.example.habit_tracker.ui.theme.AppIcons
import com.example.habit_tracker.viewmodel.HabitViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SelectHabitIconScreen(
    navController: NavController,
    habitViewModel: HabitViewModel,
    category: String,
    habitName: String,
    habitType: HabitType
) {
    // State for the search query
    var searchQuery by remember { mutableStateOf("") }
    // State for the selected icon's name (key in the map)
    var selectedIconName by remember { mutableStateOf<String?>(null) }

    // Filter the icons based on the search query
    val filteredIcons = remember(searchQuery) {
        if (searchQuery.isBlank()) {
            AppIcons.map.entries.toList() // Show all if search is empty
        } else {
            AppIcons.map.entries.filter { (name, _) ->
                name.contains(searchQuery, ignoreCase = true)
            }.toList()
        }
    }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Select Icon") },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Back")
                    }
                }
            )
        },
        floatingActionButton = {
            // Show FAB only if an icon is selected
            if (selectedIconName != null) {
                FloatingActionButton(
                    onClick = {
                        // Create the HabitEntity and save it
                        val newHabit = HabitEntity(
                            // id will be auto-generated by Room
                            name = habitName,
                            iconName = selectedIconName!!, // We know it's not null here
                            type = habitType,
                            category = category
                        )
                        habitViewModel.addHabit(newHabit)

                        // Navigate back to home or selection, clearing the add stack
                        navController.popBackStack(
                            route = AppDestinations.HABIT_SELECTION_ROUTE, // Target the route pattern
                            inclusive = false // Keep the HabitSelectionScreen itself
                        )
                    }
                ) {
                    Icon(Icons.Default.Check, contentDescription = "Save Habit")
                }
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(horizontal = 16.dp) // Add horizontal padding
        ) {
            // Search Bar
            OutlinedTextField(
                value = searchQuery,
                onValueChange = { searchQuery = it },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                label = { Text("Search Icons") },
                leadingIcon = {
                    Icon(Icons.Default.Search, contentDescription = "Search")
                },
                singleLine = true
            )

            // Grid of Icons
            LazyVerticalGrid(
                columns = GridCells.Adaptive(minSize = 72.dp), // Adjust size as needed
                modifier = Modifier.fillMaxSize(),
                contentPadding = PaddingValues(vertical = 16.dp),
                verticalArrangement = Arrangement.spacedBy(16.dp),
                horizontalArrangement = Arrangement.spacedBy(16.dp)
            ) {
                items(filteredIcons, key = { it.key }) { (name, iconVector) ->
                    IconGridItem(
                        iconName = name,
                        iconVector = iconVector,
                        isSelected = name == selectedIconName,
                        onClick = {
                            selectedIconName = name // Update selected state
                        }
                    )
                }
            }
        } // End Column
    } // End Scaffold
}

// Composable for a single item in the icon grid
@Composable
fun IconGridItem(
    iconName: String,
    iconVector: ImageVector,
    isSelected: Boolean,
    onClick: () -> Unit
) {
    val borderColor = if (isSelected) MaterialTheme.colorScheme.primary else Color.Transparent
    val backgroundColor =
        if (isSelected) MaterialTheme.colorScheme.primaryContainer else MaterialTheme.colorScheme.surfaceVariant

    Box(
        modifier = Modifier
            .size(64.dp) // Size of the clickable area
            .clip(CircleShape)
            .border(2.dp, borderColor, CircleShape)
            .background(backgroundColor, CircleShape)
            .clickable { onClick() },
        contentAlignment = Alignment.Center
    ) {
        Icon(
            imageVector = iconVector,
            contentDescription = iconName,
            modifier = Modifier.size(36.dp), // Size of the icon itself
            tint = if (isSelected) MaterialTheme.colorScheme.onPrimaryContainer else MaterialTheme.colorScheme.onSurfaceVariant
        )
    }
}